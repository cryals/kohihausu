from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from rich.text import Text
from game.economy import Economy
from game.bank import Bank
from game.cafe import Cafe
from game.products import Products
from game.staff import Staff
from game.pets import Pets
from game.events import Events
from game.upgrades import Upgrades
from game.save_load import save_game_encrypted, load_game_encrypted
from ui.interface import GameMenu
from tutorials.tutorial import start_tutorial
from data.config import LOCATIONS
from utils.helpers import load_json

console = Console()

class GameCore:
    def __init__(self):
        self.day = 1
        self.money = 1000
        self.reputation = 50
        self.comfort = 50
        self.staff_count = 1
        self.staff_efficiency = 1.0
        self.cafe_name = "Kohihausu"
        self.clients = 10
        self.is_running = False
        self.difficulty = "Medium"
        self.bankruptcy_days = 0
        self.prestige_level = 0
        self.economy = Economy(self)
        self.bank = Bank(self)
        self.cafe = Cafe(self)
        self.products = Products(self)
        self.staff = Staff(self)
        self.pets = Pets(self)
        self.events = Events(self)
        self.upgrades = Upgrades(self)
        self.menu = GameMenu(self, console)

    def start_new_game(self):
        self.day = 1
        self.money = 1000
        self.reputation = 50
        self.comfort = 50
        self.staff_count = 1
        self.staff_efficiency = 1.0
        self.clients = 10
        self.bankruptcy_days = 0
        self.prestige_level = 0
        if not hasattr(self, 'skip_tutorial') or not self.skip_tutorial:
            start_tutorial(self)
        console.print(Panel(
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ '{self.cafe_name}'! –î–µ–Ω—å {self.day} –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è ‚òïüêæ",
            style="bold magenta",
            border_style="green",
            padding=(1, 2)
        ))
        self.is_running = True
        self.game_loop()

    def load_game(self):
        console.clear()
        console.print(Panel(
            Text("–ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä—ã", style="bold magenta"),
            border_style="bright_green",
            padding=(1, 2),
            width=40
        ), justify="center")
        state = load_game_encrypted()
        if state:
            self.day = state.get("day", 1)
            self.money = state.get("money", 1000)
            self.reputation = state.get("reputation", 50)
            self.comfort = state.get("comfort", 50)
            self.staff_count = state.get("staff_count", 1)
            self.staff_efficiency = state.get("staff_efficiency", 1.0)
            self.cafe_name = state.get("cafe_name", "Kohihausu")
            self.clients = state.get("clients", 10)
            self.difficulty = state.get("difficulty", "Medium")
            self.bankruptcy_days = state.get("bankruptcy_days", 0)
            self.prestige_level = state.get("prestige_level", 0)
            self.apply_name_bonuses()
            console.print(Panel(
                Text.assemble(("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ –≤ ", "green"), (f"'{self.cafe_name}'! ", "bold magenta"), (f"–î–µ–Ω—å {self.day} ‚òïüêæ", "cyan")),
                style="white",
                border_style="bright_green",
                padding=(1, 2),
                width=50
            ), justify="center")
            self.is_running = True
            self.game_loop()
        else:
            console.print(Panel(
                Text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–≥—Ä—É. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é!", style="red"),
                border_style="bright_red",
                padding=(1, 2),
                width=40
            ), justify="center")
            console.input("[yellow]–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞...[/]")

    def save_game(self):
        state = {
            "day": self.day,
            "money": self.money,
            "reputation": self.reputation,
            "comfort": self.comfort,
            "staff_count": self.staff_count,
            "staff_efficiency": self.staff_efficiency,
            "cafe_name": self.cafe_name,
            "clients": self.clients,
            "difficulty": self.difficulty,
            "bankruptcy_days": self.bankruptcy_days,
            "prestige_level": self.prestige_level
        }
        save_game_encrypted(state)
        console.print(f"[green]–ò–≥—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –Ω–∞ –¥–µ–Ω—å {self.day}.[/]", justify="center")

    def game_loop(self):
        while self.is_running:
            console.clear()
            self.display_status()
            self.menu.display()
            action = console.input("[bold yellow]–ß—Ç–æ –¥–µ–ª–∞—Ç—å?[/] (1-13): ").strip()
            if action == "1":
                self.next_day()
            elif action == "2":
                self.save_game()
            elif action == "3":
                self.shop_menu()
            elif action == "4":
                self.finance_menu()
            elif action == "5":
                self.staff_menu()
            elif action == "6":
                self.pets_menu()
            elif action == "7":
                self.products_menu()
            elif action == "8":
                self.upgrades_menu()
            elif action == "9":
                self.location_menu()
            elif action == "10":
                self.franchise_menu()
            elif action == "11":
                self.marketing_menu()
            elif action == "12":
                self.prestige_menu()
            elif action == "13":
                self.is_running = False
                console.clear()
                console.print("[italic cyan]–í—ã—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.[/]", justify="center")
            else:
                console.print("[red]–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä![/]", justify="center")

    def next_day(self):
        self.day += 1
        console.print("[cyan]–£—Ç—Ä–æ: –ö–æ—Ñ–µ–π–Ω—è –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è![/]", justify="center")
        console.print("[cyan]–û–±–µ–¥: –ü–∏–∫ –∑–∞–∫–∞–∑–æ–≤![/]", justify="center")
        self.products.daily_sales()
        console.print("[cyan]–í–µ—á–µ—Ä: –ü–æ–¥—Å—á—ë—Ç –¥–Ω—è.[/]", justify="center")
        self.economy.daily_summary()
        self.bank.daily_update()
        self.cafe.daily_cost()
        self.staff.daily_salary()
        self.pets.daily_care()
        self.events.trigger_event()
        console.print("[cyan]–ù–æ—á—å: –í—Ä–µ–º—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏–π.[/]", justify="center")
        self.economy.set_seasonal_event()
        self.check_bankruptcy()

    def display_status(self):
        from ui.ascii_art import get_cafe_art
        console.print(get_cafe_art(self.cafe_name, self.day), justify="center")
        table = Table(box=None, show_header=True, header_style="bold cyan")
        table.add_column("–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å", style="cyan", width=15)
        table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="magenta", justify="right", width=15)
        table.add_row("–î–µ–Ω—å", f"{self.day}")
        table.add_row("–î–µ–Ω—å–≥–∏", f"${self.money} üí∞")
        table.add_row("–†–µ–ø—É—Ç–∞—Ü–∏—è", f"{self.reputation}%")
        table.add_row("–ö–æ–º—Ñ–æ—Ä—Ç", f"{self.comfort}%")
        table.add_row("–ö–ª–∏–µ–Ω—Ç—ã", f"{self.clients}")
        table.add_row("–ü–µ—Ä—Å–æ–Ω–∞–ª", f"{self.staff_count} üêæ")
        table.add_row("–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", f"{self.staff_efficiency:.1f}")
        table.add_row("–§–∏–ª–∏–∞–ª—ã", f"{self.economy.franchises}")
        table.add_row("–°–ª–æ–∂–Ω–æ—Å—Ç—å", f"{self.difficulty}")
        table.add_row("–ü—Ä–µ—Å—Ç–∏–∂", f"{self.prestige_level}")
        if self.bankruptcy_days > 0:
            table.add_row("–î–æ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞", f"{3 - self.bankruptcy_days} –¥–Ω–µ–π", style="red")
        panel = Panel(
            table,
            title=Text(f"–ö–æ—Ñ–µ–π–Ω—ã–π –¥–æ–º '{self.cafe_name}' ‚òï", style="bold magenta"),
            subtitle=Text(f"–õ–æ–∫–∞—Ü–∏—è: {self.cafe.location}", style="italic cyan"),
            border_style="bright_green",
            style="white",
            padding=(1, 2),
            width=40
        )
        console.print(panel, justify="center")

    def check_bankruptcy(self):
        if self.money < 0:
            self.bankruptcy_days += 1
            self.money = 0
            console.print(f"[red]–í–∞—à–∏ —Ñ–∏–Ω–∞–Ω—Å—ã –∏—Å—á–µ—Ä–ø–∞–Ω—ã! –û—Å—Ç–∞–ª–æ—Å—å {3 - self.bankruptcy_days} –¥–Ω–µ–π –¥–æ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞.[/]", justify="center")
            if self.bankruptcy_days >= 3:
                console.clear()
                console.print(Panel(
                    f"–ö–æ—Ñ–µ–π–Ω—è '{self.cafe_name}' –æ–±–∞–Ω–∫—Ä–æ—Ç–∏–ª–∞—Å—å –Ω–∞ {self.day}-–π –¥–µ–Ω—å. –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!",
                    style="bold red",
                    border_style="red",
                    padding=(1, 2)
                ))
                self.is_running = False
        else:
            if self.bankruptcy_days > 0:
                console.print("[green]–§–∏–Ω–∞–Ω—Å—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã! –°—Ç–∞—Ç—É—Å –ø—Ä–µ–¥–±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞ —Å–Ω—è—Ç.[/]", justify="center")
            self.bankruptcy_days = 0

    def shop_menu(self):
        console.clear()
        self.menu.display_shop()
        choice = console.input("[bold yellow]–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ (–∏–ª–∏ '–Ω–∞–∑–∞–¥'): [/]").strip()
        if choice.lower() != "–Ω–∞–∑–∞–¥":
            items = self.upgrades.load_items()
            for category, items_dict in items.items():
                if choice in items_dict:
                    item = items_dict[choice]
                    cost = self.calculate_dynamic_cost(item["base_cost"])
                    self.upgrades.buy_upgrade(choice, cost, item["bonus_type"], item["bonus_value"])
                    break
            else:
                console.print("[red]–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω![/]", justify="center")

    def finance_menu(self):
        console.clear()
        table = Table(title="–§–∏–Ω–∞–Ω—Å—ã üí∞", box=None)
        table.add_column("–î–µ–π—Å—Ç–≤–∏–µ", style="cyan")
        table.add_column("–°—É–º–º–∞", style="yellow")
        table.add_row("–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å", f"${self.money}")
        table.add_row("–ö—Ä–µ–¥–∏—Ç", f"${self.bank.loan}")
        table.add_row("–î–µ–ø–æ–∑–∏—Ç", f"${int(self.bank.deposit)}")
        console.print(table)
        action = console.input(
            "[bold yellow]–í—ã–±–µ—Ä–∏—Ç–µ: [/]1 - –í–∑—è—Ç—å –∫—Ä–µ–¥–∏—Ç, 2 - –ü–æ–≥–∞—Å–∏—Ç—å –∫—Ä–µ–¥–∏—Ç, 3 - –°–¥–µ–ª–∞—Ç—å –¥–µ–ø–æ–∑–∏—Ç, 4 - –°–Ω—è—Ç—å –¥–µ–ø–æ–∑–∏—Ç, 5 - –ù–∞–∑–∞–¥: "
        ).strip()
        if action == "1":
            amount = int(console.input("[yellow]–°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞: [/]").strip())
            self.bank.take_loan(amount)
        elif action == "2":
            amount = int(console.input("[yellow]–°—É–º–º–∞ –ø–æ–≥–∞—à–µ–Ω–∏—è: [/]").strip())
            self.bank.repay_loan(amount)
        elif action == "3":
            amount = int(console.input("[yellow]–°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–∞: [/]").strip())
            self.bank.make_deposit(amount)
        elif action == "4":
            self.bank.withdraw_deposit()
        elif action == "5":
            pass

    def staff_menu(self):
        console.clear()
        table = Table(title="–ü–µ—Ä—Å–æ–Ω–∞–ª üêæ", box=None)
        table.add_column("–†–æ–ª—å", style="cyan")
        table.add_column("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", style="yellow")
        table.add_column("–ù–∞–≤—ã–∫", style="green")
        table.add_column("–ú–æ—Ä–∞–ª—å", style="magenta")
        for role, data in self.staff.staff.items():
            table.add_row(role, str(data["count"]), f"{data['skill']:.1f}", f"{data['morale']}%")
        console.print(table)
        action = console.input(
            "[bold yellow]–í—ã–±–µ—Ä–∏—Ç–µ: [/]1 - –ù–∞–Ω—è—Ç—å, 2 - –£–≤–æ–ª–∏—Ç—å, 3 - –ü–æ–≤—ã—Å–∏—Ç—å –º–æ—Ä–∞–ª—å, 4 - –ù–∞–∑–∞–¥: "
        ).strip()
        if action == "1":
            role = console.input("[yellow]–†–æ–ª—å: [/]").strip()
            count = int(console.input("[yellow]–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: [/]").strip())
            staff_data = self.staff.load_staff()
            if role in staff_data:
                cost = self.calculate_staff_cost(staff_data[role]["base_salary"], count)
                self.staff.hire(role, count, cost, staff_data[role]["skill"])
        elif action == "2":
            role = console.input("[yellow]–†–æ–ª—å: [/]").strip()
            count = int(console.input("[yellow]–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: [/]").strip())
            self.staff.fire(role, count)
        elif action == "3":
            amount = int(console.input("[yellow]–ù–∞ —Å–∫–æ–ª—å–∫–æ –ø–æ–≤—ã—Å–∏—Ç—å –º–æ—Ä–∞–ª—å (–≤ %)? [/]").strip())
            self.staff.boost_morale(amount)
        elif action == "4":
            pass

    def pets_menu(self):
        console.clear()
        table = Table(title="–ü–∏—Ç–æ–º—Ü—ã üêæ", box=None)
        table.add_column("–ò–º—è", style="cyan")
        table.add_column("–ë–æ–Ω—É—Å", style="green")
        for name, data in self.pets.pets.items():
            table.add_row(name, f"{data['bonus_type']} +{data['bonus']}")
        console.print(table)
        action = console.input("[bold yellow]–ö—É–ø–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞ (–≤–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–ª–∏ '–Ω–∞–∑–∞–¥'): [/]").strip()
        if action.lower() != "–Ω–∞–∑–∞–¥":
            pets_data = self.pets.load_pets()
            if action in pets_data:
                pet = pets_data[action]
                cost = self.calculate_dynamic_cost(pet["base_cost"])
                self.pets.buy_pet(action, cost, pet["bonus_value"])
        else:
            pass

    def products_menu(self):
        console.clear()
        table = Table(title="–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç ‚òï", box=None)
        table.add_column("–ù–∞–∑–≤–∞–Ω–∏–µ", style="cyan")
        table.add_column("–¶–µ–Ω–∞", style="yellow")
        for name, data in self.products.menu.items():
            table.add_row(name, f"${data['price']}")
        console.print(table)
        action = console.input("[bold yellow]–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç (–≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ '–Ω–∞–∑–∞–¥'): [/]").strip()
        if action.lower() != "–Ω–∞–∑–∞–¥":
            recipes = self.products.load_recipes()
            if action in recipes["drinks"]:
                recipe = recipes["drinks"][action]
                cost = self.calculate_product_cost(recipe["base_cost"])
                self.products.add_product(action, recipe["base_price"] * (1 + self.day / 100), cost)
            elif action in recipes["desserts"]:
                recipe = recipes["desserts"][action]
                cost = self.calculate_product_cost(recipe["base_cost"])
                self.products.add_product(action, recipe["base_price"] * (1 + self.day / 100), cost)
        else:
            pass

    def upgrades_menu(self):
        console.clear()
        self.menu.display_shop()
        choice = console.input("[bold yellow]–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏—è –∏–ª–∏ '—Ä–µ–º–æ–Ω—Ç' (–∏–ª–∏ '–Ω–∞–∑–∞–¥'): [/]").strip()
        if choice.lower() == "—Ä–µ–º–æ–Ω—Ç":
            amount = int(console.input("[yellow]–ù–∞ —Å–∫–æ–ª—å–∫–æ % –æ—Ç—Ä–µ–º–æ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ? [/]").strip())
            self.economy.repair_equipment(amount)
        elif choice.lower() != "–Ω–∞–∑–∞–¥":
            items = self.upgrades.load_items()
            for category, items_dict in items.items():
                if choice in items_dict:
                    item = items_dict[choice]
                    cost = self.calculate_dynamic_cost(item["base_cost"])
                    self.upgrades.buy_upgrade(choice, cost, item["bonus_type"], item["bonus_value"])
                    break
            else:
                console.print("[red]–£–ª—É—á—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ![/]", justify="center")

    def location_menu(self):
        console.clear()
        table = Table(title="–õ–æ–∫–∞—Ü–∏–∏ üåç", box=None)
        table.add_column("–ù–∞–∑–≤–∞–Ω–∏–µ", style="cyan")
        table.add_column("–°—Ç–æ–∏–º–æ—Å—Ç—å", style="yellow")
        for loc, data in LOCATIONS.items():
            cost = self.calculate_dynamic_cost(data["base_cost"])
            table.add_row(loc, f"${cost}")
        console.print(table)
        choice = console.input("[bold yellow]–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é (–∏–ª–∏ '–Ω–∞–∑–∞–¥'): [/]").strip()
        if choice.lower() != "–Ω–∞–∑–∞–¥" and choice in LOCATIONS:
            cost = self.calculate_dynamic_cost(LOCATIONS[choice]["base_cost"])
            self.cafe.change_location(choice, cost)

    def franchise_menu(self):
        console.clear()
        console.print(f"[cyan]–¢–µ–∫—É—â–∏–µ —Ñ–∏–ª–∏–∞–ª—ã: {self.economy.franchises}[/]", justify="center")
        action = console.input("[bold yellow]1 - –û—Ç–∫—Ä—ã—Ç—å —Ñ–∏–ª–∏–∞–ª, 2 - –ù–∞–∑–∞–¥: [/]").strip()
        if action == "1":
            self.economy.add_franchise()
        elif action == "2":
            pass

    def marketing_menu(self):
        console.clear()
        table = Table(title="–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ üì£", box=None)
        table.add_column("–ö–∞–º–ø–∞–Ω–∏—è", style="cyan")
        table.add_column("–°—Ç–æ–∏–º–æ—Å—Ç—å", style="yellow")
        table.add_column("–≠—Ñ—Ñ–µ–∫—Ç", style="green")
        marketing = self.upgrades.load_marketing()
        for name, data in marketing.items():
            cost = self.calculate_dynamic_cost(data["base_cost"])
            table.add_row(name, f"${cost}", f"{data['bonus_type']} +{data['bonus_value']}")
        console.print(table)
        choice = console.input("[bold yellow]–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–º–ø–∞–Ω–∏—é (–∏–ª–∏ '–Ω–∞–∑–∞–¥'): [/]").strip()
        if choice.lower() != "–Ω–∞–∑–∞–¥":
            marketing = self.upgrades.load_marketing()
            if choice in marketing:
                item = marketing[choice]
                cost = self.calculate_dynamic_cost(item["base_cost"])
                self.upgrades.buy_upgrade(choice, cost, item["bonus_type"], item["bonus_value"])

    def prestige_menu(self):
        console.clear()
        console.print(f"[cyan]–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ø—Ä–µ—Å—Ç–∏–∂–∞: {self.prestige_level}[/]", justify="center")
        console.print(f"[yellow]–ü—Ä–µ—Å—Ç–∏–∂ –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É –∑–∞–Ω–æ–≤–æ —Å –±–æ–Ω—É—Å–æ–º –∫ –¥–æ—Ö–æ–¥—É (+{self.prestige_level * 10}%).[/]", justify="center")
        if self.day >= 100 and self.money >= 100000:
            action = console.input("[bold yellow]1 - –°–æ–≤–µ—Ä—à–∏—Ç—å –ø—Ä–µ—Å—Ç–∏–∂, 2 - –ù–∞–∑–∞–¥: [/]").strip()
            if action == "1":
                self.prestige_level += 1
                self.money = 1000 * (1 + self.prestige_level * 0.1)
                self.day = 1
                self.reputation = 50
                self.comfort = 50
                self.clients = 10
                self.staff_count = 1
                self.staff_efficiency = 1.0
                self.economy.franchises = 0
                self.bank.loan = 0
                self.bank.deposit = 0
                self.products.menu = {}
                self.pets.pets = {}
                self.staff.staff = {"–ë–∞—Ä–∏—Å—Ç–∞": {"count": 1, "skill": 1.0, "salary": 100, "morale": 100}}
                console.print(f"[green]–ü—Ä–µ—Å—Ç–∏–∂ —Å–æ–≤–µ—Ä—à—ë–Ω! –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: {self.prestige_level}. –ò–≥—Ä–∞ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞ —Å –±–æ–Ω—É—Å–æ–º.[/]", justify="center")
            elif action == "2":
                pass
        else:
            console.print("[red]–î–ª—è –ø—Ä–µ—Å—Ç–∏–∂–∞ –Ω—É–∂–Ω–æ: –î–µ–Ω—å >= 100 –∏ –î–µ–Ω—å–≥–∏ >= $100,000[/]", justify="center")
            console.input("[yellow]–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞...[/]")

    def calculate_dynamic_cost(self, base_cost):
        """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏–π, –ª–æ–∫–∞—Ü–∏–π –∏ —Ç.–¥."""
        return int(base_cost * (1 + self.day / 50) * (1 + self.reputation / 100) * (1 + self.economy.franchises * 0.2) * (1 + self.prestige_level * 0.5))

    def calculate_staff_cost(self, base_salary, count):
        """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–∞ –Ω–∞–π–º–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞."""
        return int(base_salary * count * (1 + self.day / 100) * (1 + self.staff_count / 10) * (1 + self.prestige_level * 0.3))

    def calculate_product_cost(self, base_cost):
        """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤."""
        return int(base_cost * (1 + self.day / 75) * (1 + self.clients / 50) * (1 + self.prestige_level * 0.2))

    def apply_name_bonuses(self):
        name = self.cafe_name.lower()
        bad_names = load_json("data/bad_name.json").get("bad_names", [])
        if name in bad_names:
            self.clients = int(self.clients * 0.8)
            self.reputation -= 10
            console.print("[red]–û–π! –≠—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∏–∑–≤–µ—Å—Ç–Ω–æ–µ. –ö–ª–∏–µ–Ω—Ç—ã –∏ —Ä–µ–ø—É—Ç–∞—Ü–∏—è –ø–æ—Å—Ç—Ä–∞–¥–∞–ª–∏ (-20% –∫–ª–∏–µ–Ω—Ç–æ–≤, -10% —Ä–µ–ø—É—Ç–∞—Ü–∏–∏).[/]", justify="center")
        else:
            if 3 <= len(name) <= 5:
                self.clients = int(self.clients * 1.1)
                console.print("[green]–û—Ç–ª–∏—á–Ω–æ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ! +10% –∫–ª–∏–µ–Ω—Ç–æ–≤[/]", justify="center")
            elif len(name) < 3:
                self.clients = int(self.clients * 0.85)
                console.print("[red]–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ. -15% –∫–ª–∏–µ–Ω—Ç–æ–≤[/]", justify="center")
            elif len(name) > 10:
                self.clients = int(self.clients * 0.75)
                console.print("[red]–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ. -25% –∫–ª–∏–µ–Ω—Ç–æ–≤[/]", justify="center")
            if "–∫–æ—Ñ–µ" in name or "–∫–æ—Ç" in name:
                self.reputation += 5
                console.print("[green]'–ö–æ—Ñ–µ' –∏–ª–∏ '–∫–æ—Ç' –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏! +5% —Ä–µ–ø—É—Ç–∞—Ü–∏–∏[/]", justify="center")
            console.print("[green]–£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ! +10% —á–∞–µ–≤—ã—Ö[/]", justify="center")